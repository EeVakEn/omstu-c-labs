/*
Программирование с применением функций
Написать и отладить программы для задач из лабораторных работ 1 и 6 с применением подпрограммы - функции с параметрами. 
Вычисление функции (или обработку массива) выполнить в подпрограмме, а ввод ис­ходных данных и вывод результатов - в основной программе. 
Предусмот­реть, по крайней мере, два обращения к функции с различными фактичес­кими параметрами (двумя массивами).

(Сделал для 1 в 6 ужу сделано через функции)


Даны две квадратные вещественные матрицы шестого порядка. Напечатать квадрат той из них, в которой наименьший след (сумма диагональных элементов), считая, что такая матрица одна.
*/

#include <iostream>
#include <math.h>

using namespace std;


double Y(int x, double a, double c){
    return sin(x) / sqrt(1 + pow(a * sin(x), 2)) - c * log(a * x);
}

void task1(){
    int x1 = 1;
    int x2 = 2;
    double a = 0.7;
    double c = 2.1;

    double y1 = Y(x1, a, c);
    double y2 = Y(x2, a, c);

    cout << "Задание 1 (1)" << endl << endl;
    cout << "y1 = " << y1 << endl;
    cout << "y2 = " << y2 << endl << endl;
}



const int SIZE = 6; // Размер матрицы

double trace(double matrix[][SIZE]) {
    double sum = 0;
    for (int i = 0; i < SIZE; ++i) {
        sum += matrix[i][i]; // Диагональные элементы
    }
    return sum;
}

void printMatrix(double matrix[][SIZE]) {
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            cout << matrix[i][j] << "\t";
        }
        cout << endl;
    }
}

void task2() {
    // Инициализация матриц
    double matrix1[SIZE][SIZE] = {
        {1.2, 2.2, 3.3, 4.4, 5.5, 6.6},
        {7.7, 8.8, 9.9, 10.1, 11.1, 12.2},
        {13.3, 14.4, 15.5, 16.6, 17.7, 18.8},
        {19.9, 20.1, 21.1, 22.2, 23.3, 24.4},
        {25.5, 26.6, 27.7, 28.8, 29.9, 30.1},
        {31.1, 32.2, 33.3, 34.4, 35.5, 36.6}
    };

    double matrix2[SIZE][SIZE] = {
        {36.6, 35.5, 34.4, 33.3, 32.2, 31.1},
        {30.1, 29.9, 28.8, 27.7, 26.6, 25.5},
        {24.4, 23.3, 22.2, 21.1, 20.1, 19.9},
        {18.8, 17.7, 16.6, 15.5, 14.4, 13.3},
        {12.2, 11.1, 10.1, 9.9, 8.8, 7.7},
        {6.6, 5.5, 4.4, 3.3, 2.2, 1.1}
    };

    // Вычисление следа для каждой матрицы
    double trace1 = trace(matrix1);
    double trace2 = trace(matrix2);

    // Вывод следов матриц
     cout << "Задача 2\n\n";
    cout << "След матрицы 1: " << trace1 << endl;
    cout << "След матрицы 2: " << trace2 << endl;

    // Находим и печатаем матрицу с наименьшим следом
    cout << "Матрица с наименьшим следом:" << endl;
    if (trace1 < trace2) {
        printMatrix(matrix1);
    } else {
        printMatrix(matrix2);
    }
}

int main(){
    task1();
    task2();
    return 0;
}

